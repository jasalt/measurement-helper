 2023/09 updated package versions and made it run with Python 3.11 and Flask 2.0. Email functionality not tested.

* Measurement Helper
Simplistic web application to help doing repeated measurements. Designed to be hosted for free on [[https://www.heroku.com/][Heroku]]. UI texts are in Finnish, source code in English. Consider it *public domain*, no warranties provided.

- Password protected Web UI for logging/viewing data
- Email notifications with configurable alert intervals for different measurement types

Built with
- [[http://flask.pocoo.org/][Python Flask]] web framework
  - [[https://flask-login.readthedocs.org/][Flask-Login]] extension for simple single user authentication
  - [[http://jinja.pocoo.org/][Jinja2]] templating engine
  - [[http://getbootstrap.com/][Bootstrap]] HTML UI toolkit with [[https://github.com/mbr/flask-bootstrap][Flask-Bootstrap]] extension
  - [[https://wtforms.readthedocs.org/en/latest/][WTForms]] HTML form library for input validation
- [[https://dataset.readthedocs.org/][Python Dataset]] SQL Database wrapper (tested on SQLite and PostgreSQL)
- [[https://mailgun.com/][Mailgun]] for sending emails

** To Do
- [X] +User auth by env token, [[http://flask-sqlalchemy.pocoo.org/2.0/quickstart/][flask-login]]
- [X] [[https://dataset.readthedocs.org/en/latest/][Dataset]] and sqlite
- [X] Views
- [X] [[https://github.com/lepture/flask-wtf][WTForms]] classes & validation for entries
- [X] Schedule [[http://pythonhosted.org/Flask-Mail/][flask-mail]] notifications
- [X] Serving on heroku
- [X] Backups
- [ ] SSL
- [ ] Secret token

Code was written in quickly in few days and was not tested by design. It wouldn't be convenient to build much bigger programs than this without automated testing facilities in place.
  
* Environment setup
*


Originally developed on Ubuntu 14.04 and OSX 10.10, Python 3.4. Following notes were written back then..


Distribution provided pre-requirements:
- Python with development package
- PostgreSQL development package libpq-dev
=sudo apt-get install python3-pip python3-dev libpq-dev=

Install project dependencies =pip install -r requirements.txt=.


** Initializing database and environment variables
Initialize tables =python server.py init_db=.
Database can be cleared with command =python server.py drop_db= when necessary.

Application defaults to password 'topsecret' and throws errors when running email notification checker if following variables are not set:

#+BEGIN_SRC sh
FLASK_APP_PASSWORD="somethingHard_to-guess"
MAILGUN_KEY='key-xxxblablaetcxxx'
ADMIN_EMAIL="foo@example.com"
FLASK_APP_EMAIL="bar@example.com"
SERVER_ADDRESS='http://your-awesome-domain.net'
#+END_SRC

* Development server
Command =python server.py dev= defaults to localhost:5000. Changing host and port for exposing server for external requests (might be dangerous if debugger is enabled) can be accomplished by running =python server.py dev -h 0.0.0.0 -p 80=.

* Production setup

Heroku +free plan+ was used for hosting but free plan got removed after 2022, should use Fly.io instead.

** Heroku node setup
With [[https://toolbelt.heroku.com/][Heroku Toolbelt]] installed and account configured:

1) Clone repository =git clone <repository url>=
2) Create Heroku app =heroku create <application_name>=
3) Add free PostgeSQL addon =heroku addons:create heroku-postgresql:hobby-dev= 
4) Push local repository to Heroku =git push heroku master=
5) Initialize database =heroku run python app/server.py init_db=
6) Setup environment variables from previous step
  - For Heroku, config variables are set with command =heroku config:set <VARIABLE_SETTING>=.
7) Access application at =http://<application_name>.herokuapp.com=

When continuing work on deployed Heroku app on other machine etc, skip steps 2-3 and instead set remote to existing Heroku git repository =heroku git:remote -a <application_name>=.

Optionally setup cronjob somewhere to keep node running during daytime by adding following line to cron:

=*/8 06-21 * * * curl http://<app_name>.herokuapp.com=

** Running elsewhere
See Procfile (Heroku configuration file) for hints, at least logging won't work by default via run.py so it needs work.
** Setup notification scheduler
Notifications for doing scheduled measurements are sent to addresses declared by environment variables =ADMIN_EMAIL= and =FLASK_APP_EMAIL=. Database stores only date, so hourly running check_notifications script may send notifications during night, which might cause undesired side effects.
*** Heroku Scheduler
Heroku Scheduler can be used to send notifications on daily basis, but it *requires linking a credit card to Heroku account* as scheduled tasks going over the given 750 monthly free dyno hours will require payment. To enable notifications via Heroku Scheduler addon:

1) =heroku addons:create scheduler=
2) Open scheduler web UI =heroku addons:open scheduler=
3) Setup new scheduler command =python app/server.py check_notifications=
*** Calling Heroku node to run script via cron / anacron
1) Run =crontab -e= or edit =/etc/anacrontab=
2) Add rule =* 7 * * * heroku run --app <app_name> python app/server.py check_notifications=

(didn't test this yet, but should work, maybe with minor fixing)
*** Running script on other machine via cron / anacron
Notification script =python app/server.py check_notifications= can be scheduled simply in cron or anacron. Machine should have environment variable DATABASE_URL set to application database. Heroku database url can be queried with =heroku config=.

(didn't test this yet, but should work, maybe with minor fixing)
** Setup backups
App serves CSV file of measurements via the public /backup endpoint.
This can easily be called by cron (or anacron on desktop).
Example for backing up twice a month:

1) Create directory for backups eg. =mkdir -p /home/user/backups/measurements=
2) Modify crontab by =crontab -e= and add rule 


=0 0 1/16 * * cd /home/user/backups/measurements && wget --trust-server-names http://<app_name>.herokuapp.com/backup=


Wget =--trust-server-names= option is required for keeping the timestamped filename. Resulting backup files are in form =measurement_backup_2015-09-20.csv=.
